
<%=
salt_install = config[:salt_install]
salt_url = config[:salt_bootstrap_url]
bootstrap_options = config[:salt_bootstrap_options]
salt_version = config[:salt_version]
salt_apt_repo = config[:salt_apt_repo]
salt_apt_repo_key = config[:salt_apt_repo_key]
salt_ppa = config[:salt_ppa]

<<-INSTALL
bash -c '
#{Util.shell_helpers}

# what version of salt is installed?
SALT_VERSION=`salt-call --version | cut -d " " -f 2`
set +x


if [ -z "${SALT_VERSION}" -a "#{salt_install}" = "bootstrap" ]
then
  do_download #{salt_url} /tmp/bootstrap-salt.sh
  #{sudo('sh')} /tmp/bootstrap-salt.sh #{bootstrap_options}
elif [ -z "${SALT_VERSION}" -a "#{salt_install}" = "apt" ]
then
  if [ ! $(command -v lsb_release &>/dev/null) ]; then
    . /etc/lsb-release
  else
    DISTRIB_CODENAME=$(lsb_release -s -c)
  fi

  echo "-----> Configuring apt repo for salt #{salt_version}"
  echo "deb #{salt_apt_repo}/#{salt_version} ${DISTRIB_CODENAME} main" | #{sudo('tee')} /etc/apt/sources.list.d/salt-#{salt_version}.list

  do_download #{salt_apt_repo_key} /tmp/repo.key
  #{sudo('apt-key')} add /tmp/repo.key

  #{sudo('apt-get')} update
  sleep 10
  echo "-----> Installing salt-minion (#{salt_version})"
  #{sudo('apt-get')} install -y python-support
  #{sudo('apt-get')} install -y salt-minion salt-common
elif [ -z "${SALT_VERSION}" -a "#{salt_install}" = "ppa" ]
then
  #{sudo('apt-add-repository')} -y #{salt_ppa}
  #{sudo('apt-get')} update
  #{sudo('apt-get')} install -y salt-minion salt-common
fi

# check again, now that an install of some form should have happened
SALT_VERSION=`salt-call --version | cut -d " " -f 2`

if [ -z "${SALT_VERSION}" ]
then
  echo "No salt-minion installed, install must have failed!!"
  echo "salt_install = #{salt_install}"
  echo "salt_url = #{salt_url}"
  echo "bootstrap_options = #{bootstrap_options}"
  echo "salt_version = #{salt_version}"
  echo "salt_apt_repo = #{salt_apt_repo}"
  echo "salt_apt_repo_key = #{salt_apt_repo_key}"
  echo "salt_ppa = #{salt_ppa}"
  exit 2
elif [ "${SALT_VERSION}" = "#{salt_version}" -o "#{salt_version}" = "latest" ]
then
  echo "You asked for #{salt_version} and you have ${SALT_VERSION} installed, sweet!"
elif [ ! -z "${SALT_VERSION}" -a "#{salt_install}" = "bootstrap" ]
then
  echo "You asked for bootstrap install and you have got ${SALT_VERSION}, hope thats ok!"
else
  echo "You asked for #{salt_version} and you have got ${SALT_VERSION} installed, dunno how to fix that, sorry!"
  exit 2
fi


# Parse git dependencies from metadata.yml
# $1 - path to <formula>/metadata.yml
# sample to output:
#    https://github.com/salt-formulas/salt-formula-git git
#    https://github.com/salt-formulas/salt-formula-salt salt
function fetchDependencies() {
    METADATA="$1";
    grep -E "^dependencies:" "$METADATA" >/dev/null || return 0
    (python - $METADATA | while read dep; do fetchGitFormula $dep; done) <<-DEPS
		import sys,yaml
		for dep in yaml.load(open(sys.argv[1], "ro"))["dependencies"]:
		  print("{source} {name}").format(**dep)
		DEPS
}

# Fetch formula from git repo
# $1 - formula git repo url
# $2 - formula name (optional)
# $3 - branch (optional)
function fetchGitFormula {
    test -n "${FETCHED}" || declare -a FETCHED=()
    export GIT_FORMULAS_PATH=${GIT_FORMULAS_PATH:-/usr/share/salt-formulas/env/_formulas}
    #{sudo('mkdir')} -p "$GIT_FORMULAS_PATH"
    if [ -n "$1" ]; then
        source="$1"
        name="$2"
        test -n "$name" || name="${source//*salt-formula-}"
        test -z "$3" && branch=master || branch=$3
        if ! [[ "${FETCHED[*]}" =~ "$name" ]]; then # dependency not yet fetched
          echo "Fetching: $name"
          if test -e "$GIT_FORMULAS_PATH/$name"; then
              pushd "$GIT_FORMULAS_PATH/$name" &>/dev/null
              test ! -e .git || #{sudo('git')} pull -r
              popd &>/dev/null
          else
              echo "#{sudo('git')} clone $source $GIT_FORMULAS_PATH/$name -b $branch"
              #{sudo('git')} clone "$source" "$GIT_FORMULAS_PATH/$name" -b "$branch"
          fi
          # install dependencies
          FETCHED+=($name)
          fetchDependencies "$GIT_FORMULAS_PATH/$name/metadata.yml"
        fi
    else
        echo Usage: fetchGitFormula "<git repo>" "[local formula directory name]" "[branch]"
    fi
}

#{install_external_dependencies}

#{install_chef}
'
INSTALL
%>
